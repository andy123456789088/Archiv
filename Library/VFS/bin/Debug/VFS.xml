<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VFS</name>
    </assembly>
    <members>
        <member name="T:VFS.SearchResult">
            <summary>
            Represents a result of a search
            </summary>
        </member>
        <member name="F:VFS.SearchResult.Directories">
            <summary>
            All directories which match to search-string
            </summary>
        </member>
        <member name="F:VFS.SearchResult.Files">
            <summary>
            All files which match to search-string
            </summary>
        </member>
        <member name="M:VFS.SearchResult.#ctor(VFS.Interfaces.IDirectory[],VFS.Interfaces.IFile[])">
            <summary>
            Creates a new search result
            </summary>
            <param name="Directories">All directories which match to search-string</param>
            <param name="Files">All files which match to search-string</param>
        </member>
        <member name="T:VFS.VFS">
            <summary>
            Represents the base of a virtual file system
            </summary>
        </member>
        <member name="F:VFS.VFS.DirIndex">
            <summary>
            The unique directory index, e.g. if the name of to directories are the same (but different path)
            </summary>
        </member>
        <member name="P:VFS.VFS.RootDirectory">
            <summary>
            Root Directory - Name: ""
            </summary>
        </member>
        <member name="P:VFS.VFS.NULLFILE">
            <summary>
            A File which doesn't relay to somenthing, just to use some methods which aren't static anymore (Since IFile and IDirectory-Interfaces)
            </summary>
        </member>
        <member name="F:VFS.VFS.savePath">
            <summary>
            The path where the VFS-file is stored
            </summary>
        </member>
        <member name="M:VFS.VFS.FormatPath(System.String)">
            <summary>
            Formatting the path to the right format
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.Create(System.String)">
            <summary>
            Creates a new VFS
            </summary>
            <param name="directory">All files and folders in this directory are used</param>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.Create(System.String[],System.String[])">
            <summary>
            Creates a new VFS
            </summary>
            <param name="files">Files which will be processed</param>
            <param name="directories">Directories which will be processed</param>
        </member>
        <member name="M:VFS.VFS.Read(System.String)">
            <summary>
            Loads a VHP-File into the RAM (just header-content)
            </summary>
            <param name="filePath">The path where the vhp-file is stored</param>
        </member>
        <member name="M:VFS.VFS.FileExists(System.String,VFS.Interfaces.IDirectory)">
            <summary>
            Returns true if a file is already existing
            </summary>
            <param name="path">Path of the virtual file</param>
            <param name="startNode">The directory where the path is beginning</param>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.RemoveFile(System.String,VFS.Interfaces.IDirectory)">
            <summary>
            Removes a virtual file
            </summary>
            <param name="path">Path of the virtual file</param>
            <param name="startNode">The directory where the path is beginning</param>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.Extract(System.String)">
            <summary>
            Extract all files and directories to the given path
            </summary>
            <param name="filePath">Path where the content will be extracted</param>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.ExtractFiles(System.String[],System.String)">
            <summary>
            Extracts the given files to the given path
            </summary>
            <param name="files">The files which should be extracted</param>
            <param name="directoryPath">Path where the files will be extracted</param>
        </member>
        <member name="M:VFS.VFS.ExtractFiles(VFS.Interfaces.IFile[],System.String)">
            <summary>
            Extracts the given files to the given path
            </summary>
            <param name="files">The files which should be extracted</param>
            <param name="directoryPath">Path where the files will be extracted</param>
        </member>
        <member name="M:VFS.VFS.ExtractDirectory(VFS.Interfaces.IDirectory,System.String)">
            <summary>
            Extracts the given directory to the given path
            </summary>
            <param name="currentDir">The virutal directory which should be extracted</param>
            <param name="toPath">Path where the virtual directory will be extracted</param>
        </member>
        <member name="M:VFS.VFS.ExtractDirectory(System.String,System.String)">
            <summary>
            Extract the directory to a given path
            </summary>
            <param name="path">The virutal path where the directory is stored</param>
            <param name="filePath">Path where the directory will be extracted</param>
        </member>
        <member name="M:VFS.VFS.ReadAllText(System.String,VFS.Interfaces.IDirectory)">
            <summary>
            Returns the content of a virtual file as a string (Max: 1 GB)
            </summary>
            <param name="path">Path of the virtual file</param>
            <param name="startNode">The directory where the path is beginning</param>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.ReadAllBytes(System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Returns the bytes of a virutal files (reading from originial file) (Max: 1 GB)
            </summary>
            <param name="path">Path of the virtual file</param>
            <param name="startNode">The directory where the path is beginning</param>
            <param name="different">Just to differniate between these methods (not used in this method)</param>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.WriteAllBytes(System.Byte[],System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Writes bytes into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="data">The bytes to write</param>
            <param name="name">The name of the file</param>
            <param name="dir">The directory where the file is stored in</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.WriteAllBytes(System.Byte[],System.String,System.Boolean)">
            <summary>
            Writes bytes into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="data">The bytes to write</param>
            <param name="path">The path where the file is stored in</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.WriteAllText(System.String,System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Writes bytes into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="content">The string which should be written into the file</param>
            <param name="name">The name of the file</param>
            <param name="dir">The directory where the file is stored in</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.WriteStream(System.String,VFS.Interfaces.IDirectory,System.IO.Stream,System.Boolean)">
            <summary>
            Writes a stream (file) into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="name">The name of the file</param>
            <param name="dir">The directory where the file is stored in</param>
            <param name="stream">The stream which will be written to a file stream</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.Save">
            <summary>
            Automatically called when SaveAfterChange is true.
            This method is for saving changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.VFS.Search(System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Iterates all directories and searches for a special string
            </summary>
            <param name="searchString">The search value you want to find</param>
            <param name="startNode">The dir where you want to start the search</param>
            <param name="recurse">If false, just startNode is used not the sub-directories</param>
            <returns></returns>
        </member>
        <member name="T:VFS.ExtendedVFS.HeaderInfo">
            <summary>
            Struct that contains and can processing path, start - and end - position
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.HeaderInfo.StartPosition">
            <summary>
            The position where the file starts
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.HeaderInfo.EndPosition">
            <summary>
            The position where the file ends
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.HeaderInfo.Path">
            <summary>
            The virutal path of the file
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.HeaderInfo.Failed">
            <summary>
            Input validation if it's true something went wrong
            </summary>
        </member>
        <member name="M:VFS.ExtendedVFS.HeaderInfo.#ctor(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Instantiates a new HeaderInfo
            </summary>
            <param name="Path">The virtual path of the file</param>
            <param name="StartPosition">The position where the file starts</param>
            <param name="EndPosition">The position where the file ends</param>
            <param name="Failed">Input validation</param>
        </member>
        <member name="M:VFS.ExtendedVFS.HeaderInfo.FromString(System.String)">
            <summary>
            Returns a HeaderInfo generated from the given string
            </summary>
            <param name="headerItem">The string which will be used to create HeaderInfo</param>
            <returns></returns>
        </member>
        <member name="T:VFS.ExtendedVFS.Methods">
            <summary>
            Identfies the methods (MVFS or MVFST)
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.DEFAULT">
            <summary>
            Method identifier - Default
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.EXTRACT">
            <summary>
            Method identifier - Extract
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.EXTRACT_DIR">
            <summary>
            Method identifier - ExtractDirectory
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.EXTRACT_FILES">
            <summary>
            Method identifier - ExtractFiles
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.READ">
            <summary>
            Method identifier - Read
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.READ_ALL_BYTES">
            <summary>
            Method identifier - ReadAllBytes
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.READ_ALL_TEXT">
            <summary>
            Method identifier - ReadAllText
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.REMOVE_FILE">
            <summary>
            Method identifier - RemoveFile
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.WRITE_ALL_BYTES">
            <summary>
            Method identifier - WriteAllBytes
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.WRITE_ALL_TEXT">
            <summary>
            Method identifier - WriteAllText
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.WRITE_STREAM">
            <summary>
            Method identifier - WriteStream
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.CREATE">
            <summary>
            Method identifier - CreateVHP
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Methods.SAVE">
            <summary>
            Method identifier - Save
            </summary>
        </member>
        <member name="T:VFS.ExtendedVFS.ExtendedDirectory">
            <summary>
            Directory which is modified to store instances of ModifiedFiles
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.ExtendedDirectory.NULLFILE">
            <summary>
            An empty file to use the instance-methods which are non-static
            </summary>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.#ctor">
            <summary>
            Instantiates a new ModifiedDirectory
            </summary>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.#ctor(System.String)">
            <summary>
            Instantiates a new ModifiedDirectory
            </summary>
            <param name="name">The name of the virtual directory which will be created</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.AddFile(System.String)">
            <summary>
            Adds a file to this directory - without any content
            </summary>
            <param name="fileName">The filename which will be used to added this file to this directory</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.AddFiles(System.String[])">
            <summary>
            Add files to this directory - without any content
            </summary>
            <param name="fileNames">The filesname which will be used to added these files to this directory</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.AddPathes(System.String[])">
            <summary>
            Create the virtual directories from the pathes given in data-array
            </summary>
            <param name="data">String-array that contains pathes</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.AddPathesWithFiles(System.String[])">
            <summary>
            Create virtual directories and files
            </summary>
            <param name="data">String-Array which contains pathes of the directories and files</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.CalculateLastNode(System.String)">
            <summary>
            Returns the last directory of the path (directory after last "backslash" ("\"))
            </summary>
            <param name="path">The path to work with</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.CalculateLastNode(VFS.Interfaces.IDirectory,System.String)">
            <summary>
            /// Returns the last directory of the path (directory after last "backslash" ("\"))
            </summary>
            <param name="firstNode">The directory to start at</param>
            <param name="path">The path to work with</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.Contains(System.String)">
            <summary>
            Returns true if this directory contains a subdirectory with the given name
            </summary>
            <param name="dir">Name of the subdirectory</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.GetFiles">
            <summary>
            Returns the files the directory has
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.GetIndex">
            <summary>
            Returns the unique index of this directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.GetName">
            <summary>
            Returns the name of this directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.GetParent">
            <summary>
            Returns the parent directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.GetSubDirectories">
            <summary>
            Returns a list of all subdirectories (TopLevel)
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.IndexOf(System.String)">
            <summary>
            Returns the index of the given dir
            </summary>
            <param name="dir">The directory from which you want to get the index (Be careful: This is the index of the list not the unique index)</param>
            <returns>-1 if this directory doesn't contains the given directory </returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.Remove(System.String)">
            <summary>
            Removes a directroy
            </summary>
            <param name="path">The path where the directory is stored</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.Remove(VFS.Interfaces.IDirectory)">
            <summary>
            Removes a directory
            </summary>
            <param name="dir">The instance of the directory</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.SetName(System.String)">
            <summary>
            Sets the name of the directory (Just necessary because of IDirectory)
            </summary>
            <param name="name">Name which will be set</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.SetParent(VFS.Interfaces.IDirectory)">
            <summary>
            You can set the owner of this directory
            </summary>
            <param name="parent">Direcotry instance which will be the owner of this directory</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.ToFileStringArray">
            <summary>
            Returns ALL files in each and every directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.ToFullPath(VFS.Interfaces.IDirectory)">
            <summary>
            Creates the full path till parent, if parent == null, then till start
            </summary>
            <param name="parent">The directory instance to get a special path from end to parent</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.ToStringArray">
            <summary>
            Returns all pathes of ALL directories in each and every directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedDirectory.ByPath(System.String,VFS.ExtendedVFS.ExtendedDirectory)">
            <summary>
            Returns the file instance by path
            </summary>
            <param name="path">The path where the file is stored at</param>
            <param name="rootDir">The main directory (necessary, because static)</param>
            <returns></returns>
        </member>
        <member name="T:VFS.ExtendedVFS.ExtendedFile">
            <summary>
            Represents a file with additonally StartPosition, EndPosition and Size
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.ExtendedFile.OrgPath">
            <summary>
            The path on the local harddrive (e.g. when you call CreateVHP, the original path will be stored here)
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.ExtendedFile.Parent">
            <summary>
            The owner directory of this file
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.ExtendedFile.Size">
            <summary>
            The length of this file
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.ExtendedFile.StartPosition">
            <summary>
            The position where the file starts
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.ExtendedFile.IsInvalid">
            <summary>
            Is written in workspace directory and doesn't contain positions yet. Call yourVFS.Save() to change this state.
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.ExtendedFile.EndPosition">
            <summary>
            Returns the position where the file ends (dependend from StartPosition and Size)
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.ExtendedFile.Path">
            <summary>
            The virtual path of this file
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.ExtendedFile.FileName">
            <summary>
            The filename of the original path
            </summary>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.#ctor(VFS.ExtendedVFS.HeaderInfo,VFS.ExtendedVFS.ExtendedDirectory)">
            <summary>
            Creates a new virtual file
            </summary>
            <param name="hi">Header-Information</param>
            <param name="Parent">The owner of this file</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.ByPath(System.Collections.Generic.List{VFS.Interfaces.IFile},System.String)">
            <summary>
            Returns a file instance by path
            </summary>
            <param name="files">The files where you want to retrieve the instance of the file</param>
            <param name="path">The path of the file</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.CalculateLength">
            <summary>
            Returns the length of this file with the right unit prefix
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.Contains(System.Collections.Generic.List{VFS.Interfaces.IFile},System.String)">
            <summary>
            Proves if the list contains a file with the given path
            </summary>
            <param name="files">The files which are needed for research</param>
            <param name="path">The path of the file</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.GetBytes">
            <summary>
            Returns a list of the bytes which are stored in RAM - useless here, but necessary for implenting the interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.GetName">
            <summary>
            Returns the name of this file
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.GetParentDirectory">
            <summary>
            Returns the owner of this file
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.GetPath">
            <summary>
            Returns the path of this file
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.SetByes(System.Collections.Generic.List{System.Byte})">
            <summary>
            Sets the bytes of this file - useless, nothing will be done when calling this method
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.SetName(System.String)">
            <summary>
            Sets the name of the file
            </summary>
            <param name="Name">The filename</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.SetParentDirectory(VFS.Interfaces.IDirectory)">
            <summary>
            Sets the owner of this file
            </summary>
            <param name="parentDir"></param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedFile.ToString">
            <summary>
            Returns e.g. \Path:0:500 for easier creating a header
            </summary>
            <returns></returns>
        </member>
        <member name="T:VFS.ExtendedVFS.ExtendedVFS">
            <summary>
            Represents a VFS which is more efficent and can reduce the amount of bytes to save
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.ExtendedVFS.rootDir">
            <summary>
            The root directory
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.ExtendedVFS.WorkSpacePath">
            <summary>
            The path as a cliboard which is needed to work - It's like the temp-directory
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.ExtendedVFS.NULLFILE">
            <summary>
            A File which doesn't relay to somenthing, just to use some methods which aren't static anymore (Since IFile and IDirectory-Interfaces)
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.ExtendedVFS.StartSequence">
            <summary>
            The sequence to identfy file format [{***VHP***}]
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.ExtendedVFS.READ_RESTRICTION">
            <summary>
            The restriction if you can read the file or not. It's set to 1 GB
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.ExtendedVFS.BUFFER_SIZE">
            <summary>
            Determines how much bytes does the buffer-array contains.
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.ExtendedVFS.Offset">
            <summary>
            Returns the length of the header to adjust the start and end position of a file
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.ExtendedVFS.RootDirectory">
            <summary>
            Root Directory - Name: ""
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.ExtendedVFS.SaveAfterChange">
            <summary>
            If true, creates the file completly new after a change like calling WriteAllText or WriteAllBytes
            </summary>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Instantiate a new ModifiedVFS (Version 2)
            </summary>
            <param name="savePath">The path where the VFS file is stored</param>
            <param name="workSpacePath">The path of the temp directory</param>
            <param name="BufferSize">The size of the buffer</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.Create(System.String)">
            <summary>
            Creates a new VHP (Version 2)
            </summary>
            <param name="directory">All files and folders in this directory are used</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.Create(System.String[],System.String[])">
            <summary>
            Creates a new VHP (Version 2)
            </summary>
            <param name="directories">The directories which you want to include</param>
            <param name="files">The files which you want to include</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.Read(System.String)">
            <summary>
            Loads a VHP-File into the RAM (just header-content)
            </summary>
            <param name="filePath">The path where the vhp-file is stored</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.ReadAllText(System.String,VFS.Interfaces.IDirectory)">
            <summary>
            Returns the content of a virtual file as a string (Max: 1 GB)
            </summary>
            <param name="path">Path of the virtual file</param>
            <param name="startNode">The directory where the path is beginning</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.ReadAllBytes(System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Returns the bytes of a virutal files (reading from originial file) (Max: 1 GB)
            </summary>
            <param name="path">Path of the virtual file</param>
            <param name="startNode">The directory where the path is beginning</param>
            <param name="different">Just to differniate between these methods (not used in this method)</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.IsNewVersion(System.String)">
            <summary>
            Returns if the file contains the version 2
            </summary>
            <param name="path">The file to read in</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.Extract(System.String)">
            <summary>
            Extract all files and directories to the given path
            </summary>
            <param name="filePath">Path where the content will be extracted</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.ExtractDirectory(VFS.Interfaces.IDirectory,System.String)">
            <summary>
            Extracts the given directory to the given path
            </summary>
            <param name="currentDir">The virutal directory which should be extracted</param>
            <param name="toPath">Path where the virtual directory will be extracted</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.ExtractDirectory(System.String,System.String)">
            <summary>
            Extract the directory to a given path
            </summary>
            <param name="path">The virutal path where the directory is stored</param>
            <param name="filePath">Path where the directory will be extracted</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.ExtractFiles(System.String[],System.String)">
            <summary>
            Extracts the given files to the given path
            </summary>
            <param name="files">The files which should be extracted</param>
            <param name="directoryPath">Path where the files will be extracted</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.ExtractFiles(VFS.Interfaces.IFile[],System.String)">
            <summary>
            Extracts the given files to the given path
            </summary>
            <param name="files">The files which should be extracted</param>
            <param name="directoryPath">Path where the files will be extracted</param>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.RemoveFile(System.String,VFS.Interfaces.IDirectory)">
            <summary>
            Removes a virtual file
            </summary>
            <param name="path">Path of the virtual file</param>
            <param name="startNode">The directory where the path is beginning</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.WriteAllBytes(System.Byte[],System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Writes bytes into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="data">The bytes to write</param>
            <param name="name">The name of the file</param>
            <param name="dir">The directory where the file is stored in</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.WriteAllBytes(System.Byte[],System.String,System.Boolean)">
            <summary>
            Writes bytes into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="data">The bytes to write</param>
            <param name="path">The path where the file is stored in</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.WriteAllText(System.String,System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Writes bytes into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="content">The string which should be written into the file</param>
            <param name="name">The name of the file</param>
            <param name="dir">The directory where the file is stored in</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.WriteStream(System.String,VFS.Interfaces.IDirectory,System.IO.Stream,System.Boolean)">
            <summary>
            Writes a stream (file) into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="name">The name of the file</param>
            <param name="dir">The directory where the file is stored in</param>
            <param name="stream">The stream which will be written to a file stream</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.ClearWorkspaceDirectory">
            <summary>
            Clears the content of the workspace-directory
            </summary>
        </member>
        <member name="M:VFS.ExtendedVFS.ExtendedVFS.Save">
            <summary>
            Automatically called when SaveAfterChange is true.
            This method is for saving changes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VFS.ExtendedVFS.Wrapper.ExtendedVFST">
            <summary>
            Thread-based and exception handling ModifiedVFS
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Wrapper.ExtendedVFST.defaultResult">
            <summary>
            A result which is false - no need to create a false result every time when needed a false result
            </summary>
        </member>
        <member name="T:VFS.ExtendedVFS.Wrapper.ExtendedVFST.onFinishedEvent">
            <summary>
            This event is called when the method is finishing the progress
            </summary>
            <param name="result">The result information from the method</param>
        </member>
        <member name="E:VFS.ExtendedVFS.Wrapper.ExtendedVFST.OnFinished">
            <summary>
            This event is called when the method is finishing the progress (Be careful with calling another method, because it will be called every time when onFinished is fired)
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.Wrapper.ExtendedVFST.CurrentStopWatch">
            <summary>
            Returns the StopWatch-Instance of the current process
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.Wrapper.ExtendedVFST.SaveAfterChange">
            <summary>
            If true, creates the file completly new after a change like calling WriteAllText or WriteAllBytes
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.Wrapper.ExtendedVFST.RootDirectory">
            <summary>
            Root Directory - Name: ""
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.Wrapper.ExtendedVFST.NULLFILE">
            <summary>
            A File which doesn't relay to somenthing, just to use some methods which aren't static anymore (Since IFile and IDirectory-Interfaces)
            </summary>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.#ctor(System.String,System.String,System.Boolean,System.Int64)">
            <summary>
            Instantiate a new VFS which is modified and thread-based
            </summary>
            <param name="savePath">The path where the file will be created</param>
            <param name="workSpacePath">The path of the cliboard (Please do not save an files or directories there!)</param>
            <param name="saveAfterChanged">Determines if the system should save after a change</param>
            <param name="BufferSize">The size of the file-buffer in bytes</param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.CancelThread(VFS.ExtendedVFS.Methods)">
            <summary>
            Cancels the current thread
            </summary>
            <param name="currentAction">The method which is working currently</param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.Create(System.String)">
            <summary>
            Creates a new VHP
            </summary>
            <param name="directory">All files and directories of this directory will be progressed into the VHP</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.Create(System.String[],System.String[])">
            <summary>
            Creates a new VHP
            </summary>
            <param name="directories">This directories will be taken to be progressed</param>
            <param name="files">This files will be taken to be progressed</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.Extract(System.String)">
            <summary>
            Extract all files and directories to the given path
            </summary>
            <param name="filePath">Path where the content will be extracted</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.ExtractDirectory(System.String,System.String)">
            <summary>
            Extract the directory to a given path
            </summary>
            <param name="path">The virutal path where the directory is stored</param>
            <param name="filePath">Path where the directory will be extracted</param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.ExtractDirectory(VFS.Interfaces.IDirectory,System.String)">
            <summary>
            Extracts the given directory to the given path
            </summary>
            <param name="currentDir">The virutal directory which should be extracted</param>
            <param name="toPath">Path where the virtual directory will be extracted</param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.ExtractFiles(VFS.Interfaces.IFile[],System.String)">
            <summary>
            Extracts the given files to the given path
            </summary>
            <param name="files">The files which should be extracted</param>
            <param name="directoryPath">Path where the files will be extracted</param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.ExtractFiles(System.String[],System.String)">
            <summary>
            Extracts the given files to the given path
            </summary>
            <param name="files">The files which should be extracted</param>
            <param name="directoryPath">Path where the files will be extracted</param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.FileExists(System.String,VFS.Interfaces.IDirectory)">
            <summary>
            Returns true if a file is already existing
            </summary>
            <param name="path">Path of the virtual file</param>
            <param name="startNode">The directory where the path is beginning</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.RemoveFile(System.String,VFS.Interfaces.IDirectory)">
            <summary>
            Removes a virtual file
            </summary>
            <param name="path">Path of the virtual file</param>
            <param name="startNode">The directory where the path is beginning</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.Read(System.String)">
            <summary>
            Loads a VHP-File into the RAM (just header-content)
            </summary>
            <param name="filePath">The path where the vhp-file is stored</param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.ReadAllBytes(System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Returns the bytes of a virutal files (reading from originial file) (Max: 1 GB)
            </summary>
            <param name="path">Path of the virtual file</param>
            <param name="startNode">The directory where the path is beginning</param>
            <param name="different">Just to differniate between these methods (not used in this method)</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.ReadAllText(System.String,VFS.Interfaces.IDirectory)">
            <summary>
            Returns the content of a virtual file as a string (Max: 1 GB)
            </summary>
            <param name="path">Path of the virtual file</param>
            <param name="startNode">The directory where the path is beginning</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.WriteStream(System.String,VFS.Interfaces.IDirectory,System.IO.Stream,System.Boolean)">
            <summary>
            Writes a stream (file) into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="name">The name of the file</param>
            <param name="dir">The directory where the file is stored in</param>
            <param name="stream">The stream which will be written to a file stream</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.WriteAllBytes(System.Byte[],System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Writes bytes into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="data">The bytes to write</param>
            <param name="name">The name of the file</param>
            <param name="dir">The directory where the file is stored in</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.WriteAllBytes(System.Byte[],System.String,System.Boolean)">
            <summary>
            Writes bytes into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="data">The bytes to write</param>
            <param name="path">The path where the file is stored in</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.WriteAllText(System.String,System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Writes bytes into a file in the workspace directory (while saving the file will be saved too)
            </summary>
            <param name="content">The string which should be written into the file</param>
            <param name="name">The name of the file</param>
            <param name="dir">The directory where the file is stored in</param>
            <param name="overrideExisting">Determines if the file will be replace if the file is already exisiting</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.ExtendedVFST.Save">
            <summary>
            Automatically called when SaveAfterChange is true.
            This method is for saving changes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VFS.ExtendedVFS.Wrapper.Progress">
            <summary>
            Describes the method of a method in ModifiedVFS
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Wrapper.Progress.SpecialCode">
            <summary>
            Code to identfy the method
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.Wrapper.Progress.Value">
            <summary>
            The value of of the current progress
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.Wrapper.Progress.EntireValue">
            <summary>
            The value of the main-progress
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Wrapper.Progress.LstProgress">
            <summary>
            List which contains each progress to calculate the final value if there is more than one progress at the same time
            </summary>
        </member>
        <member name="T:VFS.ExtendedVFS.Wrapper.Progress.onValueChanged">
            <summary>
            onValueChanged is called when the value or the main-progress is changed
            </summary>
            <param name="value">T</param>
            <param name="step"></param>
        </member>
        <member name="E:VFS.ExtendedVFS.Wrapper.Progress.OnValueChanged">
            <summary>
            OnValueChanged is called when the value or the main-progress is changed
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.Wrapper.Progress.MainValue">
            <summary>
            The calculated value of all progress-instances
            </summary>
        </member>
        <member name="P:VFS.ExtendedVFS.Wrapper.Progress.MainEntireValue">
            <summary>
            The calculatet value of all progress-instances which describes the main-progress
            </summary>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Progress.#ctor(System.Double,System.Double,VFS.ExtendedVFS.Methods)">
            <summary>
            Instantiates a new progress and adds this progress to the list of all progresses
            </summary>
            <param name="Value">Value of the current progress</param>
            <param name="EntireValue">Value of the main progress</param>
            <param name="SpecialCode">Code to identify the method</param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Progress.#ctor">
            <summary>
            Instantiate a new progress and adds this progress to the list of all progresses
            </summary>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Progress.GetProgress(VFS.ExtendedVFS.Methods)">
            <summary>
            Get the progress by the method identifier
            </summary>
            <param name="SpecialCode">Code to identify the code</param>
            <returns></returns>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Progress.Register(System.Double,System.Double,VFS.ExtendedVFS.Methods)">
            <summary>
            Creates a new progress with the values or change the values of an existing progress
            </summary>
            <param name="value">The value of the current progress</param>
            <param name="entireValue">The value of the main progress</param>
            <param name="SpecialCode">The code to identify the method</param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Progress.Register(System.Double,VFS.ExtendedVFS.Methods)">
            <summary>
            Creates a new progress with the values or change the values of an existing progress
            </summary>
            <param name="value">The value of the current progress</param>
            <param name="SpecialCode">The code to identify the method</param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Progress.Register(System.Double,VFS.ExtendedVFS.Methods,System.Boolean)">
            <summary>
            Creates a new progress with the values or change the values of an existing progress
            </summary>
            <param name="entireState">The value of the main progress</param>
            <param name="SpecialCode">The code to identify the method</param>
            <param name="different">Just to differentiate between the other method (not used in the method)</param>
        </member>
        <member name="T:VFS.ExtendedVFS.Wrapper.Result">
            <summary>
            Describes a result which contains information about the running of a method in ModifiedVFS
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Wrapper.Result.Success">
            <summary>
            Determines whether the methods fails or not
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Wrapper.Result.Value">
            <summary>
            The return-value of the method
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Wrapper.Result.Typ">
            <summary>
            The type of return-value of the method
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Wrapper.Result.CurrentException">
            <summary>
            An exception, if there is one
            </summary>
        </member>
        <member name="F:VFS.ExtendedVFS.Wrapper.Result.SpecialCode">
            <summary>
            Code to identify the method
            </summary>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Result.#ctor(System.Boolean,System.Object,System.Type,System.Exception,VFS.ExtendedVFS.Methods)">
            <summary>
            Instantiates a new result
            </summary>
            <param name="Success">Determines whether the methods fails or not</param>
            <param name="Value">The return-value of the method</param>
            <param name="Typ">The type of return-value of the method</param>
            <param name="CurrentException"> An exception, if there is one</param>
            <param name="SpecialCode">Code to identify the method</param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Result.#ctor(System.Boolean,System.Object,System.Type,VFS.ExtendedVFS.Methods)">
            <summary>
            Instantiate a new result
            </summary>
            <param name="Success"></param>
            <param name="Value"></param>
            <param name="Typ"></param>
            <param name="SpecialCode"></param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Result.#ctor(System.Boolean,System.String,System.Exception,VFS.ExtendedVFS.Methods)">
            <summary>
            Instantiate a new result
            </summary>
            <param name="Success"></param>
            <param name="Value"></param>
            <param name="CurrentException"></param>
            <param name="SpecialCode"></param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Result.#ctor(System.Boolean,System.Byte[],System.Exception,VFS.ExtendedVFS.Methods)">
            <summary>
            Instantiate a new result
            </summary>
            <param name="Success"></param>
            <param name="Value"></param>
            <param name="CurrentException"></param>
            <param name="SpecialCode"></param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Result.#ctor(System.Boolean,System.Boolean,System.Exception,VFS.ExtendedVFS.Methods)">
            <summary>
            Instantiate a new result
            </summary>
            <param name="Success"></param>
            <param name="Value"></param>
            <param name="CurrentException"></param>
            <param name="SpecialCode"></param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Result.#ctor(System.Boolean,System.String,VFS.ExtendedVFS.Methods)">
            <summary>
            Instantiate a new result
            </summary>
            <param name="Success"></param>
            <param name="Value"></param>
            <param name="SpecialCode"></param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Result.#ctor(System.Boolean,System.Byte[],VFS.ExtendedVFS.Methods)">
            <summary>
            Instantiate a new result
            </summary>
            <param name="Success"></param>
            <param name="Value"></param>
            <param name="SpecialCode"></param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Result.#ctor(System.Boolean,System.Boolean,VFS.ExtendedVFS.Methods)">
            <summary>
            Instantiate a new result
            </summary>
            <param name="Success"></param>
            <param name="Value"></param>
            <param name="SpecialCode"></param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Result.#ctor(System.Boolean,VFS.ExtendedVFS.Methods)">
            <summary>
            Instantiate a new result
            </summary>
            <param name="Success"></param>
            <param name="SpecialCode"></param>
        </member>
        <member name="M:VFS.ExtendedVFS.Wrapper.Result.#ctor(System.Boolean,System.Exception,VFS.ExtendedVFS.Methods)">
            <summary>
            Instantiate a new result
            </summary>
            <param name="Success"></param>
            <param name="CurrentException"></param>
            <param name="SpecialCode"></param>
        </member>
        <member name="T:VFS.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:VFS.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:VFS.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="T:VFS.Directory">
            <summary>
            Represents a virtual directory
            </summary>
        </member>
        <member name="F:VFS.Directory.Name">
            <summary>
            The name of the directory
            </summary>
        </member>
        <member name="F:VFS.Directory.SubDirs">
            <summary>
            The directorys which are this directory contains
            </summary>
        </member>
        <member name="F:VFS.Directory.Files">
            <summary>
            The files of this directory
            </summary>
        </member>
        <member name="F:VFS.Directory.Index">
            <summary>
            The index to identify each folder right
            </summary>
        </member>
        <member name="F:VFS.Directory.parent">
            <summary>
            The parent directory of this directory
            </summary>
        </member>
        <member name="T:VFS.Directory.onChanged">
            <summary>
            This event throws if something was changed.
            </summary>
            <param name="action"></param>
        </member>
        <member name="E:VFS.Directory.OnChanged">
            <summary>
            This event throws if something was changed.
            </summary>
        </member>
        <member name="T:VFS.Directory.Type">
            <summary>
            The distinguish between the different changes
            </summary>
        </member>
        <member name="F:VFS.Directory.Type.AddedPath">
            <summary>
            If a path was added - If a directory was added
            </summary>
        </member>
        <member name="F:VFS.Directory.Type.AddedFile">
            <summary>
            If a file was added
            </summary>
        </member>
        <member name="F:VFS.Directory.Type.DeletedDirectory">
            <summary>
            If a directory was deleted
            </summary>
        </member>
        <member name="F:VFS.Directory.Type.DeletedFile">
            <summary>
            If a file was deleted
            </summary>
        </member>
        <member name="F:VFS.Directory.Type.Default">
            <summary>
            Default action
            </summary>
        </member>
        <member name="P:VFS.Directory.Parent">
            <summary>
            The parent of this directory - the main directory doesn't have a parent
            </summary>
        </member>
        <member name="M:VFS.Directory.#ctor(System.String)">
            <summary>
            Initates a new virtual directroy
            </summary>
            <param name="Name">The name of this directroy</param>
        </member>
        <member name="M:VFS.Directory.ToStringArray">
            <summary>
            Creates a string array of all pathes
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Directory.ToFileStringArray">
            <summary>
            Returns ALL files in each and every directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Directory.AddPathesWithFiles(System.String[])">
            <summary>
            Create virtual directories and files
            </summary>
            <param name="data">String-Array which contains pathes of the directories and files</param>
        </member>
        <member name="M:VFS.Directory.Remove(VFS.Interfaces.IDirectory)">
            <summary>
            Removes a directory
            </summary>
            <param name="dir">The instance of the directory</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Directory.Remove(System.String)">
            <summary>
            Removes a directroy
            </summary>
            <param name="path">The path where the directory is stored</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Directory.Contains(System.String)">
            <summary>
            Returns true if this directory contains a subdirectory with the given name
            </summary>
            <param name="dir">Name of the subdirectory</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Directory.IndexOf(System.String)">
            <summary>
            Returns the index of the given dir
            </summary>
            <param name="dir">The directory from which you want to get the index (Be careful: This is the index of the list not the unique index)</param>
            <returns>-1 if this directory doesn't contains the given directory </returns>
        </member>
        <member name="M:VFS.Directory.AddFile(System.String)">
            <summary>
            Adds a file to this directory - without any content
            </summary>
            <param name="fileName">The filename which will be used to added this file to this directory</param>
        </member>
        <member name="M:VFS.Directory.AddFiles(System.String[])">
            <summary>
            Add files to this directory - without any content
            </summary>
            <param name="fileNames">The filesname which will be used to added these files to this directory</param>
        </member>
        <member name="M:VFS.Directory.AddPathes(System.String[])">
            <summary>
            Create the virtual directories from the pathes given in data-array
            </summary>
            <param name="data">String-array that contains pathes</param>
        </member>
        <member name="M:VFS.Directory.GetName">
            <summary>
            Returns the name of this directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Directory.SetName(System.String)">
            <summary>
            Sets the name of the directory (Just necessary because of IDirectory)
            </summary>
            <param name="name">Name which will be set</param>
        </member>
        <member name="M:VFS.Directory.GetSubDirectories">
            <summary>
            Returns a list of all subdirectories (TopLevel)
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Directory.GetFiles">
            <summary>
            Returns list of all files in this directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Directory.GetIndex">
            <summary>
            Returns the unique index of this directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Directory.GetParent">
            <summary>
            Returns the files the directory has
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Directory.SetParent(VFS.Interfaces.IDirectory)">
            <summary>
            You can set the owner of this directory
            </summary>
            <param name="parent">Direcotry instance which will be the owner of this directory</param>
        </member>
        <member name="M:VFS.Directory.ToFullPath(VFS.Interfaces.IDirectory)">
            <summary>
            Creates the whole path of this directory
            </summary>
            <param name="parent">The path from this to parent. If parent is null, you get the full path. Otherwise you get the path to the parent directory</param>
            <returns>The full path of this directory</returns>
        </member>
        <member name="M:VFS.Directory.CalculateLastNode(System.String)">
            <summary>
            Returns the last directory of the path (directory after last "backslash" ("\"))
            </summary>
            <param name="path">The path to work with</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Directory.CalculateLastNode(VFS.Interfaces.IDirectory,System.String)">
            <summary>
            Returns the last directory of the path (directory after last "backslash" ("\"))
            </summary>
            <param name="firstNode">The directory to start at</param>
            <param name="path">The path to work with</param>
            <returns></returns>
        </member>
        <member name="T:VFS.Extensions.ConvertLength">
            <summary>
            Calculates the appropriate length of bytes
            </summary>
        </member>
        <member name="T:VFS.Extensions.ConvertLength.Type_">
            <summary>
            Unit prefix
            </summary>
        </member>
        <member name="F:VFS.Extensions.ConvertLength.Type_.B">
            <summary>
            Bytes
            </summary>
        </member>
        <member name="F:VFS.Extensions.ConvertLength.Type_.KB">
            <summary>
            KiloBytes
            </summary>
        </member>
        <member name="F:VFS.Extensions.ConvertLength.Type_.MB">
            <summary>
            MegaBytes
            </summary>
        </member>
        <member name="F:VFS.Extensions.ConvertLength.Type_.GB">
            <summary>
            GigaBytes
            </summary>
        </member>
        <member name="F:VFS.Extensions.ConvertLength.Type_.TB">
            <summary>
            TerraBytes
            </summary>
        </member>
        <member name="T:VFS.Extensions.ConvertLength.Item">
            <summary>
            Represents a result of a calculation
            </summary>
        </member>
        <member name="F:VFS.Extensions.ConvertLength.Item.Length">
            <summary>
            Final calculated value
            </summary>
        </member>
        <member name="F:VFS.Extensions.ConvertLength.Item.Type">
            <summary>
            Final calculated unit prefix
            </summary>
        </member>
        <member name="M:VFS.Extensions.ConvertLength.Item.#ctor(System.Double,VFS.Extensions.ConvertLength.Type_)">
            <summary>
            Instantiates a new result
            </summary>
            <param name="Length">Final calculated value</param>
            <param name="Type">Final calculated unit prefix</param>
        </member>
        <member name="M:VFS.Extensions.ConvertLength.Item.ToString">
            <summary>
            Returns a formatted string with length and unit prefix
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Extensions.ConvertLength.Calculate(System.Double)">
            <summary>
            Converts the value into the right unit prefix
            </summary>
            <param name="value">The length in bytes</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Extensions.ConvertLength.Calculate(VFS.Extensions.ConvertLength.Item,VFS.Extensions.ConvertLength.Type_)">
            <summary>
            Converts the value into the right unit prefix
            </summary>
            <param name="source">Converts a result into a special unit prefix</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:VFS.Extensions.ExtendedList`1">
            <summary>
            Represents a normal list which fires an event when the items will be changed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VFS.Extensions.ExtendedList`1.onItemChanged">
            <summary>
            This method describes the event OnItemChanged with an item-array which contains the items that was deleted or added
            </summary>
            <param name="item"></param>
        </member>
        <member name="E:VFS.Extensions.ExtendedList`1.OnItemChanged">
            <summary>
            This event will be thrown when the items will be changed (added/deleted)
            </summary>
        </member>
        <member name="M:VFS.Extensions.ExtendedList`1.#ctor">
            <summary>
            Instantiates a new list
            </summary>
        </member>
        <member name="M:VFS.Extensions.ExtendedList`1.Add(`0)">
            <summary>
            See List Of T for information
            </summary>
            <param name="item">See List Of T for information</param>
        </member>
        <member name="M:VFS.Extensions.ExtendedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See List Of T for information
            </summary>
            <param name="items">See List Of T for information</param>
        </member>
        <member name="M:VFS.Extensions.ExtendedList`1.Remove(`0)">
            <summary>
            See List Of T for information
            </summary>
            <param name="item">See List Of T for information</param>
        </member>
        <member name="M:VFS.Extensions.ExtendedList`1.RemoveAt(System.Int32)">
            <summary>
            See List Of T for information
            </summary>
            <param name="index">See List Of T for information</param>
        </member>
        <member name="M:VFS.Extensions.ExtendedList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            See List Of T for information
            </summary>
            <param name="index">See List Of T for information</param>
            <param name="count">See List Of T for information</param>
        </member>
        <member name="M:VFS.Extensions.ExtendedList`1.CallEvent(`0[])">
            <summary>
            This method throws the event and makes it possible to throw the event also from other objects
            </summary>
            <param name="items">The items which were added/removed</param>
        </member>
        <member name="M:VFS.Extensions.ExtendedList`1.CallEvent(`0)">
            <summary>
            This method throws the event and makes it possible to throw the event also from other objects
            </summary>
            <param name="item">The item which was added/removed</param>
        </member>
        <member name="T:VFS.File">
            <summary>
            Represents a virutal file
            </summary>
        </member>
        <member name="F:VFS.File.Name">
            <summary>
            The name of this file
            </summary>
        </member>
        <member name="F:VFS.File.Bytes">
            <summary>
            The content of this file in bytes
            </summary>
        </member>
        <member name="F:VFS.File.Parent">
            <summary>
            The parent directory of this file
            </summary>
        </member>
        <member name="P:VFS.File.Path">
            <summary>
            The full path of this file
            </summary>
        </member>
        <member name="M:VFS.File.#ctor(System.String,VFS.Interfaces.IDirectory)">
            <summary>
            Initiates a new file
            </summary>
            <param name="Name">The file name</param>
            <param name="Parent">The directory which contains the file</param>
        </member>
        <member name="M:VFS.File.CalculateLength">
            <summary>
            Calculates the length of the file in the apropriate unit prefix
            </summary>
            <returns>ConvertLenght.Item - Size and Unit Prefix</returns>
        </member>
        <member name="M:VFS.File.GetName">
            <summary>
            Returns the name of this file
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.File.SetName(System.String)">
            <summary>
            Sets the name of the file
            </summary>
            <param name="Name">The filename</param>
        </member>
        <member name="M:VFS.File.GetPath">
            <summary>
            Returns the path of this file
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.File.GetBytes">
            <summary>
            Returns a list of the bytes which are stored in RAM
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.File.SetByes(System.Collections.Generic.List{System.Byte})">
            <summary>
            Sets the bytes of this file
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:VFS.File.GetParentDirectory">
            <summary>
            Returns the owner of this file
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.File.SetParentDirectory(VFS.Interfaces.IDirectory)">
            <summary>
            Sets the owner of this file
            </summary>
            <param name="parentDir"></param>
        </member>
        <member name="M:VFS.File.ByPath(System.Collections.Generic.List{VFS.Interfaces.IFile},System.String)">
            <summary>
            Returns a file instance by path
            </summary>
            <param name="files">The files where you want to retrieve the instance of the file</param>
            <param name="path">The path of the file</param>
            <returns></returns>
        </member>
        <member name="M:VFS.File.Contains(System.Collections.Generic.List{VFS.Interfaces.IFile},System.String)">
            <summary>
            Proves if the list contains a file with the given path
            <param name="files">The files which are needed for research</param>
            <param name="path">The path of the file</param>
            <returns></returns>
            </summary>
        </member>
        <member name="T:VFS.Interfaces.IDirectory">
            <summary>
            Determines the methods which a special implementation of a virtual directory needs
            </summary>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.GetName">
            <summary>
            Returns the name of this directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.SetName(System.String)">
            <summary>
            Sets the name of the directory (Just necessary because of IDirectory)
            </summary>
            <param name="name">Name which will be set</param>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.GetSubDirectories">
            <summary>
            Returns a list of all subdirectories (TopLevel)
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.GetFiles">
            <summary>
            Returns list of all files in this directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.GetIndex">
            <summary>
            Returns the unique index of this directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.GetParent">
            <summary>
            Returns the files the directory has
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.SetParent(VFS.Interfaces.IDirectory)">
            <summary>
            You can set the owner of this directory
            </summary>
            <param name="parent">Direcotry instance which will be the owner of this directory</param>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.ToFullPath(VFS.Interfaces.IDirectory)">
            <summary>
            Creates the full path till parent, if parent == null, then till start
            </summary>
            <param name="parent">The directory instance to get a special path from end to parent</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.ToStringArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.ToFileStringArray">
            <summary>
            Returns ALL files in each and every directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.AddPathesWithFiles(System.String[])">
            <summary>
            Create virtual directories and files
            </summary>
            <param name="data">String-Array which contains pathes of the directories and files</param>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.AddPathes(System.String[])">
            <summary>
            Create the virtual directories from the pathes given in data-array
            </summary>
            <param name="data">String-array that contains pathes</param>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.Remove(VFS.Interfaces.IDirectory)">
            <summary>
            Removes a directory
            </summary>
            <param name="dir">The instance of the directory</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.Remove(System.String)">
            <summary>
            Removes a directroy
            </summary>
            <param name="path">The path where the directory is stored</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.Contains(System.String)">
            <summary>
            Returns true if this directory contains a subdirectory with the given name
            </summary>
            <param name="dir">Name of the subdirectory</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.IndexOf(System.String)">
            <summary>
            Returns the index of the given dir
            </summary>
            <param name="dir">The directory from which you want to get the index (Be careful: This is the index of the list not the unique index)</param>
            <returns>-1 if this directory doesn't contains the given directory </returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.AddFile(System.String)">
            <summary>
            Adds a file to this directory - without any content
            </summary>
            <param name="fileName">The filename which will be used to added this file to this directory</param>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.AddFiles(System.String[])">
            <summary>
            Add files to this directory - without any content
            </summary>
            <param name="fileNames">The filesname which will be used to added these files to this directory</param>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.CalculateLastNode(System.String)">
            <summary>
            Returns the last directory of the path (directory after last "backslash" ("\"))
            </summary>
            <param name="path">The path to work with</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IDirectory.CalculateLastNode(VFS.Interfaces.IDirectory,System.String)">
            <summary>
            Returns the last directory of the path (directory after last "backslash" ("\"))
            </summary>
            <param name="firstNode">The directory to start at</param>
            <param name="path">The path to work with</param>
            <returns></returns>
        </member>
        <member name="T:VFS.Interfaces.IFile">
            <summary>
            Determines the methods which a special implementation of a virtual file needs
            </summary>
        </member>
        <member name="M:VFS.Interfaces.IFile.GetName">
            <summary>
            Returns the name of this file
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IFile.SetName(System.String)">
            <summary>
            Sets the name of the file
            </summary>
            <param name="Name">The filename</param>
        </member>
        <member name="M:VFS.Interfaces.IFile.GetPath">
            <summary>
            Returns the path of this file
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IFile.GetBytes">
            <summary>
            Returns a list of the bytes which are stored in RAM
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IFile.SetByes(System.Collections.Generic.List{System.Byte})">
            <summary>
            Sets the bytes of this file
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:VFS.Interfaces.IFile.GetParentDirectory">
            <summary>
            Returns the owner of this file
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IFile.SetParentDirectory(VFS.Interfaces.IDirectory)">
            <summary>
            Sets the owner of this file
            </summary>
            <param name="parentDir"></param>
        </member>
        <member name="M:VFS.Interfaces.IFile.ByPath(System.Collections.Generic.List{VFS.Interfaces.IFile},System.String)">
            <summary>
            Returns a file instance by path
            </summary>
            <param name="files">The files where you want to retrieve the instance of the file</param>
            <param name="path">The path of the file</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IFile.Contains(System.Collections.Generic.List{VFS.Interfaces.IFile},System.String)">
            <summary>
            Proves if the list contains a file with the given path
            </summary>
            <param name="files">The files which are needed for research</param>
            <param name="path">The path of the file</param>
            <returns></returns>
        </member>
        <member name="M:VFS.Interfaces.IFile.CalculateLength">
            <summary>
            Returns the length of this file with the right unit prefix
            </summary>
            <returns></returns>
        </member>
        <member name="T:VFS.SplitVFS">
            <summary>
            Represents the Virtual File System which consists of File and Directory-class
            </summary>
        </member>
        <member name="F:VFS.SplitVFS.MainCounter">
            <summary>
            This counter describes how many PackBytes are used to identify files
            </summary>
        </member>
        <member name="F:VFS.SplitVFS.PackByte">
            <summary>
            The byte ("-") which is needed for wrapping files and directories in one file
            </summary>
        </member>
        <member name="P:VFS.SplitVFS.RootDirectory">
            <summary>
            Root directory of the currentFile-System
            </summary>
        </member>
        <member name="P:VFS.SplitVFS.NULLFILE">
            <summary>
            A File which doesn't relay to somenthing, just to use some methods which aren't static anymore (Since IFile and IDirectory-Interfaces)
            </summary>
        </member>
        <member name="M:VFS.SplitVFS.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new virtual file system.
            </summary>
            <param name="savePath">Path for storing the VFS</param>
            /// <param name="MainCounter">The amout of seperator chars</param>
            /// <param name="PackByte">Char type from 1 to 255 for seperator</param>
        </member>
        <member name="T:VFS.SplitVFS.onReady">
            <summary>
            This event is called when thread finishes.
            </summary>
        </member>
        <member name="E:VFS.SplitVFS.OnReady">
            <summary>
            This event is called when thread finishes.
            </summary>
        </member>
        <member name="T:VFS.SplitVFS.onSaved">
            <summary>
            This event is called when a change was done in the system
            </summary>
        </member>
        <member name="E:VFS.SplitVFS.OnSaved">
            <summary>
            This event is called when a change was done in the system
            </summary>
        </member>
        <member name="M:VFS.SplitVFS.calculateFrom(System.String)">
            <summary>
            Returns a byte-array from input string with default encoding
            </summary>
            <param name="data">The input string</param>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.calculateFrom(System.Byte[])">
            <summary>
            Returns a string from byte-array with default encoding
            </summary>
            <param name="data">The input byte-array</param>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.generateString">
            <summary>
            Generates a string - based on MainCounter and PackByte to separate the files
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.generateBytes">
            <summary>
            Generates a byte-array - based on MainCounter and PackByte to separate the files
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.checkNextItems(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Returns true if the next count-bytes are all equal to PackByte
            </summary>
            <param name="count"></param>
            <param name="byte_"></param>
            <param name="index"></param>
            <param name="btArray"></param>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.WriteAllText(System.String,System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Creates a file
            </summary>
            <param name="content">File content</param>
            <param name="name">File name</param>
            <param name="dir">Stored directory</param>
            <param name="overrideExisting">Determines whether a file which exists should be overriden or not</param>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.WriteAllBytes(System.Byte[],System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Creates a file
            </summary>
            <param name="data">File content in bytes</param>
            <param name="name">File name</param>
            <param name="dir">Stored directory</param>
            <param name="overrideExisting">Determines whether a file which exists should be overriden or not</param>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.WriteAllBytes(System.Byte[],System.String,System.Boolean)">
            <summary>
            Writes file with full path starting from root-directory.
            </summary>
            <param name="data">Byte-Array with data</param>
            <param name="path">Full path</param>
            <param name="overrideExisting">Whether an existing file should be replaced by another one</param>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.WriteStream(System.String,VFS.Interfaces.IDirectory,System.IO.Stream,System.Boolean)">
            <summary>
            Writes a file from a stream
            </summary>
            <param name="name">File name</param>
            <param name="dir">Direcotry which holds the foöe</param>
            <param name="stream">Input stream</param>
            <param name="overrideExisting">Whether a file should be replaced, if it exists already</param>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.ReadAllBytes(System.String,VFS.Interfaces.IDirectory,System.Boolean)">
            <summary>
            Returns the file content in byte-Array
            </summary>
            <param name="path">Full filepath</param>
            <param name="startNode">Dir, where you want to start at. It's well to use the root-Dir here!</param>
            <param name="different">Just to differentiate between the methods - no usage in in this method</param>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.ReadAllText(System.String,VFS.Interfaces.IDirectory)">
            <summary>
            Returns the file content
            </summary>
            <param name="path">Filename</param>
            <param name="startNode">Directory where the path is beginning at</param>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.Save">
            <summary>
            Writes filesystem to physical file
            </summary>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.Read(System.String)">
            <summary>
            Loads the content of the file into this instance
            </summary>
            <param name="filePath">The path where the file is stored</param>
        </member>
        <member name="M:VFS.SplitVFS.Extract(System.String)">
            <summary>
            Extracts the RAM content to a physical file like Archiv does.
            </summary>
            <param name="filePath">The path of the physical file</param>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.ExtractFiles(System.String[],System.String)">
            <summary>
            Extract files - but not all like .Extract(string path) does
            </summary>
            <param name="path">All file pathes</param>
            <param name="directoryPath">The physical directory where you want to write in</param>
        </member>
        <member name="M:VFS.SplitVFS.ExtractDirectory(VFS.Interfaces.IDirectory,System.String)">
            <summary>
            Extracts a directory full with content to toPath
            </summary>
            <param name="currentDir">The direcotry</param>
            <param name="toPath">A vaild file path</param>
        </member>
        <member name="M:VFS.SplitVFS.ExtractDirectory(System.String,System.String)">
            <summary>
            Extracts the directory by the given path
            </summary>
            <param name="path">The virutal path</param>
            <param name="filePath">The path where do you want to extract the directory</param>
        </member>
        <member name="M:VFS.SplitVFS.ExtractFiles(VFS.Interfaces.IFile[],System.String)">
            <summary>
            Extract files
            </summary>
            <param name="files">Array of files</param>
            <param name="directoryPath">Path to extract in</param>
        </member>
        <member name="M:VFS.SplitVFS.Create(System.String)">
            <summary>
            Creates a new VFS
            </summary>
            <param name="directory">All files and folders in this directory are used</param>
            <returns></returns>
        </member>
        <member name="M:VFS.SplitVFS.Create(System.String[],System.String[])">
            <summary>
            Creates a new VFS
            </summary>
            <param name="files">Files which will be processed</param>
            <param name="directories">Directories which will be processed</param>
        </member>
    </members>
</doc>
